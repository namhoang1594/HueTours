@inherits Umbraco.Web.Macros.PartialViewMacroPage
@using System.Web.Mvc.Html
@using ClientDependency.Core.Mvc
@using Umbraco.Web
@using Umbraco.Web.Controllers
@using Huetours.Controller

@{
    @*
        You can specify a custom member type alias in the constructor, the default is 'Member'
        for example, to use 'Custom Member' you'd use this syntax:

        var registerModel = Members.CreateRegistrationModel("Custom Member");
    *@

    var registerModel = Members.CreateRegistrationModel();
    registerModel.RedirectUrl = "https://localhost:44308/";

    @*
        Configurable here:

        registerModel.RedirectUrl       - Optional. What path to redirect to if registration is successful.
                                          By default the member will be redirected to the current umbraco page
                                          unless this is specified.

        registerModel.UsernameIsEmail   - the default is true
                                          if you want the username to be different from the email
                                          address, set this to true and add a new Username field in
                                          the form below

                                          @Html.LabelFor(m => registerModel.Username)
                                          @Html.TextBoxFor(m => registerModel.Username)
                                          @Html.ValidationMessageFor(m => registerModel.Username)
    *@

Html.EnableClientValidation();
Html.RequiresCss("~/css/login-register-style.css");
Html.RequiresCss("https://cdnjs.cloudflare.com/ajax/libs/material-design-iconic-font/2.2.0/css/material-design-iconic-font.min.css");

Html.EnableUnobtrusiveJavaScript();
Html.RequiresJs("https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js");
Html.RequiresJs("https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.0/jquery.validate.min.js");
Html.RequiresJs("https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.11/jquery.validate.unobtrusive.min.js");

var success = TempData["FormSuccess"] != null;
}

@Html.RenderCssHere()
@*NOTE: This RenderJsHere code should be put on your main template page where the rest of your script tags are placed*@
@Html.RenderJsHere()



<section class="signup">

    @if (success)
    {
        @* This message will show if registerModel.RedirectUrl is not defined (default) *@
        <p>Đăng ký thành công</p>
    }
    else
    {
        using (Html.BeginUmbracoForm<MemberSurfaceController>("HandleRegisterMember", new { memberGroup = "Premium" }))
        {
            @Html.AntiForgeryToken()

            <div class="container">
                <div class="signup-content">
                    <div class="signup-form">
                        <h2 class="form-title">Đăng ký</h2>
                        @Html.ValidationSummary("registerModel", true)

                        <div class="form-group">
                            <label for="name"><i class="zmdi zmdi-account material-icons-name"></i></label>
                            @Html.TextBoxFor(m => registerModel.Name, new { @class = "signup-form", placeholder = "Tên tài khoản" })
                            @Html.ValidationMessageFor(m => registerModel.Name)
                        </div>
                        <div class="form-group">
                            <label for="email"><i class="zmdi zmdi-email"></i></label>
                            @Html.TextBoxFor(m => registerModel.Email, new { @class = "signup-form", placeholder = "Email" })
                            @Html.ValidationMessageFor(m => registerModel.Email)
                        </div>
                        <div class="form-group">
                            <label for="pass"><i class="zmdi zmdi-lock"></i></label>
                            @Html.PasswordFor(m => registerModel.Password, new { @class = "signup-form", placeholder = "Mật khẩu" })
                            @Html.ValidationMessageFor(m => registerModel.Password)
                        </div>
                        <div class="form-group">
                            <label for="re-pass"><i class="zmdi zmdi-lock-outline"></i></label>
                            <input type="password" name="re_pass" id="re_pass" placeholder="Repeat your password" />
                        </div>
                        <div class="form-group">
                            <input type="checkbox" name="agree-term" id="agree-term" class="agree-term" />
                            <label for="agree-term" class="label-agree-term"><span><span></span></span>Tôi đồng ý với tất cả điều trong  <a href="#" class="term-service">Điều khoản dịch vụ</a></label>
                        </div>
                        @if (registerModel.MemberProperties != null)
                        {
                            @*
                                It will only displays properties marked as "Member can edit" on the "Info" tab of the Member Type.
                            *@
                            for (var i = 0; i < registerModel.MemberProperties.Count; i++)
                            {
                                @Html.LabelFor(m => registerModel.MemberProperties[i].Value, registerModel.MemberProperties[i].Name)
                                @*
                                    By default this will render a textbox but if you want to change the editor template for this property you can
                                    easily change it. For example, if you wanted to render a custom editor for this field called "MyEditor" you would
                                    create a file at ~/Views/Shared/EditorTemplates/MyEditor.cshtml", then you will change the next line of code to
                                    render your specific editor template like:
                                    @Html.EditorFor(m => registerModel.MemberProperties[i].Value, "MyEditor")
                                *@
                                @Html.EditorFor(m => registerModel.MemberProperties[i].Value)
                                @Html.HiddenFor(m => registerModel.MemberProperties[i].Alias)
                                <br />
                            }
                        }

                        @Html.HiddenFor(m => registerModel.MemberTypeAlias)
                        @Html.HiddenFor(m => registerModel.RedirectUrl)
                        @Html.HiddenFor(m => registerModel.UsernameIsEmail)
                        <button class="form-group form-button form-submit" style="border:none!important">
                            Đăng ký
                        </button>
                    </div>
                    <div class="signup-image">
                        <figure><img src="~/images/signup-image.jpg" alt="sing up image"></figure>
                        <a href="https://localhost:44308/vi/login-member/" class="signup-image-link">Đã là thành viên? Đăng nhập ngay</a>
                    </div>
                </div>
            </div>

        }
    }
</section>





@*<legend>Đăng ký</legend>

@Html.ValidationSummary("registerModel", true)

@Html.LabelFor(m => registerModel.Name)
@Html.TextBoxFor(m => registerModel.Name)
@Html.ValidationMessageFor(m => registerModel.Name)
<br />

@Html.LabelFor(m => registerModel.Email)
@Html.TextBoxFor(m => registerModel.Email)
@Html.ValidationMessageFor(m => registerModel.Email)
<br />

@Html.LabelFor(m => registerModel.Password)
@Html.PasswordFor(m => registerModel.Password)
@Html.ValidationMessageFor(m => registerModel.Password)
<br />

@if (registerModel.MemberProperties != null)
{*@
    @*
        It will only displays properties marked as "Member can edit" on the "Info" tab of the Member Type.
    *@
    @*for (var i = 0; i < registerModel.MemberProperties.Count; i++)
    {
        @Html.LabelFor(m => registerModel.MemberProperties[i].Value, registerModel.MemberProperties[i].Name)*@
        @*
            By default this will render a textbox but if you want to change the editor template for this property you can
            easily change it. For example, if you wanted to render a custom editor for this field called "MyEditor" you would
            create a file at ~/Views/Shared/EditorTemplates/MyEditor.cshtml", then you will change the next line of code to
            render your specific editor template like:
            @Html.EditorFor(m => registerModel.MemberProperties[i].Value, "MyEditor")
        *@
        @*@Html.EditorFor(m => registerModel.MemberProperties[i].Value)
        @Html.HiddenFor(m => registerModel.MemberProperties[i].Alias)
        <br />
    }
}

@Html.HiddenFor(m => registerModel.MemberTypeAlias)
@Html.HiddenFor(m => registerModel.RedirectUrl)
@Html.HiddenFor(m => registerModel.UsernameIsEmail)

<button>Đăng ký</button>*@